a.
1.
CREATE TABLE IF NOT EXISTS category (
    category_id INTEGER AUTOINCREMENT PRIMARY KEY,
    name TEXT NOT NULL
);

2.
CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER AUTOINCREMENT PRIMARY KEY,
    name TEXT NOT NULL,
    price NUMERIC(10, 2)  NOT NULL,
    category_id INTEGER NOT NULL,
    FOREIGN KEY (category_id) REFERENCES category(category_id)
);

3.
CREATE TABLE IF NOT EXISTS nutritions (
    nutrition_id INTEGER AUTOINCREMENT PRIMARY KEY,
    product_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    calories NUMERIC(10, 2),
    fats NUMERIC(10, 2),
    sugar NUMERIC(10, 2),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

4.
CREATE TABLE IF NOT EXISTS orders (
    order_id INTEGER AUTOINCREMENT PRIMARY KEY,
    data_time DATETIME NOT NULL,
    address TEXT NOT NULL,
    customer_name TEXT NOT NULL,
    customer_ph TEXT NOT NULL,
    total_price NUMERIC(10, 2) NOT NULL
);

5.
CREATE TABLE IF NOT EXISTS products_orders (
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    amount INT NOT NULL,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);



b.
category -> products                    -> one to many
products -> nutritions                  -> one to many
products -> products_orders             -> one to many
orders   -> products_orders             -> one to many
orders   -> products -> products_orders -> many to many



c.INSERT INTO - populating the tables



d.
i.
SELECT p.name AS product_name, c.name AS category_name,
    n.name AS nutrition_name, n.calories, n.fats, n.sugar
FROM products p
JOIN category c ON p.category_id = c.category_id
JOIN nutritions n ON p.product_id = n.product_id
ORDER BY c.name, p.name;


ii.
SELECT o.*, p.name AS product_name, p.price AS product_price,
    po.amount AS product_amount, (p.price * po.amount) AS total_product_price
FROM orders o
JOIN products_orders po ON o.order_id = po.order_id
JOIN products p ON po.product_id = p.product_id
ORDER BY o.order_id, p.name;


iii.
INSERT INTO products_orders (order_id, product_id, amount)
SELECT o.order_id, p.product_id, FLOOR(1 + (RAND() * 5))
JOIN products p ON p.product_id = (SELECT product_id FROM products ORDER BY RANDOM() LIMIT 1);


iv.
UPDATE orders o
SET o.total_price = (
    SELECT SUM(po.amount * p.price)
    FROM products_orders po
    JOIN products p ON po.product_id = p.product_id
    WHERE po.order_id = o.order_id
    GROUP BY po.order_id
);


v.
SELECT order_id, total_price
FROM orders
WHERE total_price = (SELECT MAX(total_price) FROM orders);

SELECT order_id, total_price
FROM orders
WHERE total_price = (SELECT MIN(total_price) FROM orders);

SELECT AVG(total_price) AS average_price
FROM orders;


vi.
SELECT customer_name, COUNT(order_id) AS order_count
FROM orders
GROUP BY customer_name
ORDER BY order_count DESC
LIMIT 1;


vii.
SELECT p.name, SUM(po.amount) AS total_sales
FROM products_orders po
JOIN products p ON po.product_id = p.product_id
GROUP BY p.name
ORDER BY total_sales DESC
LIMIT 1;

SELECT p.name, SUM(po.amount) AS total_sales
FROM products_orders po
JOIN products p ON po.product_id = p.product_id
GROUP BY p.name
ORDER BY total_sales ASC
LIMIT 1;

SELECT AVG(total_sales) AS average_sales
FROM (
    SELECT SUM(po.amount) AS total_sales
    FROM products_orders po
    GROUP BY po.product_id
) AS product_sales;


viii.
SELECT c.name, SUM(po.amount) AS total_sales
FROM products_orders po
JOIN products p ON po.product_id = p.product_id
JOIN category c ON p.category_id = c.category_id
GROUP BY c.name
ORDER BY total_sales DESC
LIMIT 1;

SELECT c.name, SUM(po.amount) AS total_sales
FROM products_orders po
JOIN products p ON po.product_id = p.product_id
JOIN category c ON p.category_id = c.category_id
GROUP BY c.name
ORDER BY total_sales ASC
LIMIT 1;


